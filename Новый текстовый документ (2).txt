import telebot
import os
import json
from telebot import types
import random
import time
import logging
from telebot.types import InputMediaPhoto, InputMediaVideo, InputMediaDocument


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "7571758285:AAFBPa8GcDTYAuqAfYE9RF_abW5ng00PfsU"
bot = telebot.TeleBot(TOKEN)


if not os.path.exists('user_data'):
    os.makedirs('user_data')
if not os.path.exists('user_files'):
    os.makedirs('user_files')


def load_user_buttons(user_id):
    file_path = f'user_data/{user_id}_buttons.json'
    if os.path.exists(file_path):
        with open(file_path, 'r', encoding='utf-8') as file:
            return json.load(file)
    else:
        return {}


def save_user_buttons(user_id, buttons):
    file_path = f'user_data/{user_id}_buttons.json'
    with open(file_path, 'w', encoding='utf-8') as file:
        json.dump(buttons, file, ensure_ascii=False)


def create_user_keyboard(user_id):
    buttons = load_user_buttons(user_id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    

    markup.add(types.KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É"))
    markup.add(types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"))
    

    for button_name in buttons.keys():
        markup.add(types.KeyboardButton(button_name))
    
    return markup


def save_file(file_info, file_id, file_type, user_id, button_name):
    user_dir = f'user_files/{user_id}'
    if not os.path.exists(user_dir):
        os.makedirs(user_dir)
    
    button_dir = f'{user_dir}/{button_name}'
    if not os.path.exists(button_dir):
        os.makedirs(button_dir)
    
    if file_type == 'photo':
        file_path = f'{button_dir}/{file_id}.jpg'
    elif file_type == 'document':
        if hasattr(file_info, 'file_name'):
            file_name = file_info.file_name
        else:
            file_name = f'{file_id}.doc'
        file_path = f'{button_dir}/{file_name}'
    elif file_type == 'video':
        file_path = f'{button_dir}/{file_id}.mp4'
    elif file_type == 'audio':
        file_path = f'{button_dir}/{file_id}.mp3'
    else:
        file_path = f'{button_dir}/{file_id}.file'
    
    downloaded_file = bot.download_file(bot.get_file(file_id).file_path)
    with open(file_path, 'wb') as new_file:
        new_file.write(downloaded_file)
    
    return file_path

def update_button_info(user_id, button_name, file_path, file_type, file_id):
    buttons = load_user_buttons(user_id)
    
    if button_name not in buttons:
        buttons[button_name] = []
    
    file_info = {
        'path': file_path,
        'type': file_type,
        'id': file_id
    }
    
    buttons[button_name].append(file_info)
    save_user_buttons(user_id, buttons)

def fake_internet_search(query):
    time.sleep(3)
    
    responses = [
        f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∞–π–¥–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: —ç—Ç–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è!",
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è '{query}': —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º, —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∞–µ—Ç—Å—è —É—á–µ–Ω—ã–º–∏.",
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–º–µ '{query}': –≤ —É—á–µ–±–Ω–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ —Ä–µ—à–µ–Ω–∏—é —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.",
        f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∞–π–¥–µ–Ω–æ 1,547,000 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ù–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π: —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —É—á–µ–±–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.",
        f"–ü–æ–∏—Å–∫ –ø–æ '{query}' –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —É—á–µ–±–Ω–∏–∫–∞–º –∏ –Ω–∞—É—á–Ω—ã–º —Å—Ç–∞—Ç—å—è–º –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è."
    ]
    
    return random.choice(responses)

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É—á–µ–±–µ.\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "- –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n"
        "- –•—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª—ã: –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ\n"
        "- –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã (–∏–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ)\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π:",
        reply_markup=create_user_keyboard(user_id)
    )

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(
        message.chat.id,
        "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "‚ûï –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤\n"
        "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å - –∏–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n\n"
        "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ –∫–Ω–æ–ø–∫—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
    )

@bot.message_handler(func=lambda message: message.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É")
def create_button(message):
    user_id = message.from_user.id
    
    msg = bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏:",
        reply_markup=types.ForceReply(selective=True)
    )
    
    bot.register_next_step_handler(msg, process_button_name)

def process_button_name(message):
    user_id = message.from_user.id
    button_name = message.text.strip()
    
    if len(button_name) < 1 or len(button_name) > 30:
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=create_user_keyboard(user_id)
        )
        return
    
    if button_name in ["‚ûï –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]:
        bot.send_message(
            message.chat.id,
            "‚ùå –≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
            reply_markup=create_user_keyboard(user_id)
        )
        return
    
    buttons = load_user_buttons(user_id)
    
    if button_name in buttons:
        bot.send_message(
            message.chat.id,
            "‚ùå –ö–Ω–æ–ø–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
            reply_markup=create_user_keyboard(user_id)
        )
        return
    
    buttons[button_name] = []
    save_user_buttons(user_id, buttons)
    
    bot.send_message(
        message.chat.id,
        f"‚úÖ –ö–Ω–æ–ø–∫–∞ '{button_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
        reply_markup=create_user_keyboard(user_id)
    )

@bot.message_handler(func=lambda message: message.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
def ask_question(message):
    user_id = message.from_user.id
    
    msg = bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–ø—ã—Ç–∞—é—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç:",
        reply_markup=types.ForceReply(selective=True)
    )
    
    bot.register_next_step_handler(msg, process_question)

def process_question(message):
    user_id = message.from_user.id
    question = message.text.strip()
    
    if len(question) < 3:
        bot.send_message(
            message.chat.id,
            "‚ùå –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –≤–æ–ø—Ä–æ—Å.",
            reply_markup=create_user_keyboard(user_id)
        )
        return
    
    search_message = bot.send_message(
        message.chat.id,
        "üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é..."
    )
    
    answer = fake_internet_search(question)
    
    bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=search_message.message_id,
        text=f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n{answer}"
    )
    
    bot.send_message(
        message.chat.id,
        "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?",
        reply_markup=create_user_keyboard(user_id)
    )

@bot.message_handler(func=lambda message: message.text not in ["‚ûï –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"])
def handle_custom_button(message):
    user_id = message.from_user.id
    button_name = message.text
    
    buttons = load_user_buttons(user_id)
    
    if button_name not in buttons:
        bot.send_message(
            message.chat.id,
            "‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=create_user_keyboard(user_id)
        )
        return
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    upload_button = types.InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data=f"upload_{button_name}")
    view_button = types.InlineKeyboardButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª—ã", callback_data=f"view_{button_name}")
    delete_button = types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data=f"delete_{button_name}")
    
    markup.add(upload_button, view_button)
    markup.add(delete_button)
    
    bot.send_message(
        message.chat.id,
        f"–í—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞: {button_name}\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.from_user.id
    callback_data = call.data
    
    if callback_data.startswith('upload_'):
        button_name = callback_data.split('_', 1)[1]
        msg = bot.send_message(
            call.message.chat.id,
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∫–Ω–æ–ø–∫—É '{button_name}':"
        )
        bot.register_next_step_handler(msg, lambda m: process_file_upload(m, button_name))
    
    elif callback_data.startswith('view_'):
        button_name = callback_data.split('_', 1)[1]
        view_files(call.message, button_name)
    
    elif callback_data.startswith('delete_'):
        button_name = callback_data.split('_', 1)[1]
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        yes_button = types.InlineKeyboardButton("–î–∞", callback_data=f"confirm_delete_{button_name}")
        no_button = types.InlineKeyboardButton("–ù–µ—Ç", callback_data=f"cancel_delete")
        markup.add(yes_button, no_button)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É '{button_name}' –∏ –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤ –Ω–µ—ë —Ñ–∞–π–ª—ã?",
            reply_markup=markup
        )
    
    elif callback_data.startswith('confirm_delete_'):
        button_name = callback_data.split('_', 2)[2]
        delete_button(call.message, button_name)
    
    elif callback_data == 'cancel_delete':
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ."
        )
        
        bot.send_message(
            call.message.chat.id,
            "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?",
            reply_markup=create_user_keyboard(user_id)
        )
    
    elif callback_data.startswith('file_'):
        parts = callback_data.split('_', 3)
        button_name = parts[1]
        file_index = int(parts[2])
        
        send_file(call.message, button_name, file_index)
    
    bot.answer_callback_query(call.id)


def process_file_upload(message, button_name):
    user_id = message.from_user.id
    
    if not (message.content_type in ['photo', 'document', 'video', 'audio']):
        bot.send_message(
            message.chat.id,
            "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ.",
            reply_markup=create_user_keyboard(user_id)
        )
        return
    
    try:
        file_id = None
        file_info = None
        file_type = message.content_type
        
        if file_type == 'photo':
            file_id = message.photo[-1].file_id
            file_info = message.photo[-1]
        elif file_type == 'document':
            file_id = message.document.file_id
            file_info = message.document
        elif file_type == 'video':
            file_id = message.video.file_id
            file_info = message.video
        elif file_type == 'audio':
            file_id = message.audio.file_id
            file_info = message.audio
        
        file_path = save_file(file_info, file_id, file_type, user_id, button_name)
        
        update_button_info(user_id, button_name, file_path, file_type, file_id)
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –∫–Ω–æ–ø–∫—É '{button_name}'!",
            reply_markup=create_user_keyboard(user_id)
        )
    
    except Exception as e:
        logger.error(f"Error uploading file: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=create_user_keyboard(user_id)
        )

def view_files(message, button_name):
    user_id = message.chat.id
    
    buttons = load_user_buttons(user_id)
    
    if button_name not in buttons:
        bot.send_message(
            message.chat.id,
            "‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=create_user_keyboard(user_id)
        )
        return
    
    files = buttons[button_name]
    
    if not files:
        bot.send_message(
            message.chat.id,
            f"üìÇ –í –∫–Ω–æ–ø–∫–µ '{button_name}' –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.",
            reply_markup=create_user_keyboard(user_id)
        )
        return
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    for i, file_info in enumerate(files):
        file_type = file_info['type']
        
        if file_type == 'photo':
            icon = "üñº"
        elif file_type == 'document':
            icon = "üìÑ"
        elif file_type == 'video':
            icon = "üé¨"
        elif file_type == 'audio':
            icon = "üéµ"
        else:
            icon = "üìÅ"
        
        file_name = os.path.basename(file_info['path'])
        
        button_text = f"{icon} –§–∞–π–ª #{i+1}: {file_name}"
        callback_data = f"file_{button_name}_{i}"
        
        if len(button_text) > 50:
            button_text = button_text[:47] + "..."
        
        markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
    
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_{button_name}"))
    
    bot.send_message(
        message.chat.id,
        f"üìÇ –§–∞–π–ª—ã –≤ –∫–Ω–æ–ø–∫–µ '{button_name}':\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=markup
    )

def send_file(message, button_name, file_index):
    user_id = message.chat.id
    
    buttons = load_user_buttons(user_id)
    
    if button_name not in buttons:
        bot.send_message(
            message.chat.id,
            "‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=create_user_keyboard(user_id)
        )
        return
    
    files = buttons[button_name]
    
    if file_index >= len(files):
        bot.send_message(
            message.chat.id,
            "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=create_user_keyboard(user_id)
        )
        return
    
    file_info = files[file_index]
    file_type = file_info['type']
    file_id = file_info['id']
    
    try:
        if file_type == 'photo':
            bot.send_photo(message.chat.id, file_id, caption=f"–§–∞–π–ª –∏–∑ –∫–Ω–æ–ø–∫–∏ '{button_name}'")
        elif file_type == 'document':
            bot.send_document(message.chat.id, file_id, caption=f"–§–∞–π–ª –∏–∑ –∫–Ω–æ–ø–∫–∏ '{button_name}'")
        elif file_type == 'video':
            bot.send_video(message.chat.id, file_id, caption=f"–§–∞–π–ª –∏–∑ –∫–Ω–æ–ø–∫–∏ '{button_name}'")
        elif file_type == 'audio':
            bot.send_audio(message.chat.id, file_id, caption=f"–§–∞–π–ª –∏–∑ –∫–Ω–æ–ø–∫–∏ '{button_name}'")
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.",
                reply_markup=create_user_keyboard(user_id)
            )
    except Exception as e:
        logger.error(f"Error sending file: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.",
            reply_markup=create_user_keyboard(user_id)
        )
    
    bot.send_message(
        message.chat.id,
        "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?",
        reply_markup=create_user_keyboard(user_id)
    )

def delete_button(message, button_name):
    user_id = message.chat.id
    
    buttons = load_user_buttons(user_id)
    
    if button_name not in buttons:
        bot.send_message(
            message.chat.id,
            "‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=create_user_keyboard(user_id)
        )
        return
    
    button_dir = f'user_files/{user_id}/{button_name}'
    if os.path.exists(button_dir):
        try:
            for file_name in os.listdir(button_dir):
                file_path = os.path.join(button_dir, file_name)
                if os.path.isfile(file_path):
                    os.remove(file_path)
            
            os.rmdir(button_dir)
        except Exception as e:
            logger.error(f"Error deleting button directory: {e}")
    
    del buttons[button_name]
    save_user_buttons(user_id, buttons)
    
    bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=message.message_id,
        text=f"‚úÖ –ö–Ω–æ–ø–∫–∞ '{button_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
    )
    
    bot.send_message(
        message.chat.id,
        "–ß—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?",
        reply_markup=create_user_keyboard(user_id)
    )

def main():
    logger.info("Starting bot...")
    bot.polling(none_stop=True, interval=0)

if __name__ == '__main__':
    main()

